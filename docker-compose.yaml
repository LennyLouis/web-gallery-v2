services:
  # ===================================
  # MINIO SERVICE (S3-compatible storage)
  # ===================================
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - /data/web-gallery-v2/minio/data:/data
    expose: ["9000","9001"]
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge

      # Service 1: API S3 (9000)
      - traefik.http.services.minio-api.loadbalancer.server.port=9000
      - traefik.http.routers.minio-api.rule=Host(`cdn.photos.lennylouis.fr`)
      - traefik.http.routers.minio-api.entrypoints=websecure
      - traefik.http.routers.minio-api.tls.certresolver=le
      - traefik.http.routers.minio-api.service=minio-api

      # Service 2: Console (9001)
      - traefik.http.services.minio-console.loadbalancer.server.port=9001
      - traefik.http.routers.minio-console.rule=Host(`minio-console.photos.lennylouis.fr`)
      - traefik.http.routers.minio-console.entrypoints=websecure
      - traefik.http.routers.minio-console.tls.certresolver=le
      - traefik.http.routers.minio-console.service=minio-console
    networks: [edge, app]
    restart: unless-stopped

  createbuckets:
    image: quay.io/minio/mc:RELEASE.2025-03-12T17-29-24Z
    depends_on:
      - minio
    restart: on-failure
    networks: [app]
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set dockerminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb dockerminio/web-gallery;
      exit 0;
      "

  # ===================================
  # BACKEND SERVICE (Node.js/Express)
  # ===================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: web-gallery-backend
    environment:
      - PORT=${PORT:-3000}
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_PUBLIC_ENDPOINT=${S3_PUBLIC_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-${MINIO_ROOT_USER}}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD}}
      - S3_BUCKET=${S3_BUCKET:-web-gallery}
      - S3_REGION=${S3_REGION:-eu-west-1}
      - S3_FORCE_PATH_STYLE=${S3_FORCE_PATH_STYLE:-true}
    expose: ["3000"]
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 3s
      timeout: 3s
      retries: 6
    depends_on:
      - minio
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.gallery-api.rule=Host(`photos.lennylouis.fr`) && PathPrefix(`/api`)
      - traefik.http.routers.gallery-api.entrypoints=websecure
      - traefik.http.routers.gallery-api.tls.certresolver=le
      - traefik.http.routers.gallery-api.priority=100
      - traefik.http.services.gallery-api.loadbalancer.server.port=3000
      
      # Configuration pour gros téléchargements (Traefik v3.1 syntax)
      - traefik.http.routers.gallery-api.middlewares=api-timeout
      - traefik.http.middlewares.api-timeout.buffering.maxRequestBodyBytes=0
      - traefik.http.middlewares.api-timeout.buffering.maxResponseBodyBytes=0
    networks: [edge, app]
    restart: unless-stopped

  # ===================================
  # EXPORT RUNNER SERVICE
  # ===================================
  export-runner:
    build:
      context: ./runner
      dockerfile: Dockerfile
    container_name: web-gallery-export-runner
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_PUBLIC_ENDPOINT=${S3_PUBLIC_ENDPOINT}
      - S3_REGION=${S3_REGION:-eu-west-1}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY:-${MINIO_ROOT_USER}}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD}}
      - S3_BUCKET=${S3_BUCKET:-web-gallery}
      - S3_FORCE_PATH_STYLE=${S3_FORCE_PATH_STYLE:-true}
      - RUNNER_POLL_INTERVAL_MS=5000
      - RUNNER_CLEANUP_INTERVAL_MS=3600000
      - RUNNER_MAX_CONCURRENT_JOBS=2
      - RUNNER_DOWNLOAD_TIMEOUT_MS=60000
    depends_on:
      - minio
    networks: [edge, app]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Runner is healthy')"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  # ===================================
  # FRONTEND SERVICE (React Router v7 - Static)
  # ===================================
  frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
      args:
        - VITE_SUPABASE_URL=${SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - VITE_API_URL=${VITE_API_URL}
        - VITE_S3_ENDPOINT=${S3_PUBLIC_ENDPOINT}
    container_name: web-gallery-frontend
    expose: ["80"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.gallery-web.rule=Host(`photos.lennylouis.fr`)
      - traefik.http.routers.gallery-web.entrypoints=websecure
      - traefik.http.routers.gallery-web.tls.certresolver=le
      - traefik.http.routers.gallery-web.priority=50
      - traefik.http.services.gallery-web.loadbalancer.server.port=80
    networks: [edge, app]
    restart: unless-stopped

# ===================================
# VOLUMES
# ===================================
volumes:
  minio_data:
    driver: local
    labels:
      - "project=web-gallery"
      - "service=minio"

# ===================================
# NETWORKS
# ===================================
networks:
  edge:
    external: true
  app:
    internal: true