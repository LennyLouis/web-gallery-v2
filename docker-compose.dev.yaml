services:
  # ===================================
  # MINIO SERVICE (S3-compatible storage)
  # ===================================
  minio:
    image: minio/minio:latest
    container_name: web-gallery-minio
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"   # API
      - "${MINIO_CONSOLE_PORT:-9001}:9001"             # Console Web
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    networks:
      - web-gallery-network
    restart: unless-stopped

  createbuckets:
    image: quay.io/minio/mc:RELEASE.2025-03-12T17-29-24Z
    depends_on:
      - minio
    restart: on-failure
    networks:
      - web-gallery-network
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set dockerminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      /usr/bin/mc mb dockerminio/web-gallery;
      exit 0;
      "

  # ===================================
  # BACKEND SERVICE (Node.js/Express)
  # ===================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: web-gallery-backend
    ports:
      - "${BACKEND_PUBLIC_PORT:-3000}:3000"
    extra_hosts:
    - "host.docker.internal:host-gateway"
    environment:
      - PORT=${PORT:-3000}
      - NODE_ENV=development
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_PUBLIC_ENDPOINT=${S3_PUBLIC_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-${MINIO_ROOT_USER}}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD}}
      - S3_BUCKET=${S3_BUCKET:-web-gallery}
      - S3_REGION=${S3_REGION:-eu-west-1}
      - S3_FORCE_PATH_STYLE=${S3_FORCE_PATH_STYLE:-true}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 3s
      timeout: 3s
      retries: 6
    depends_on:
      - minio
    networks:
      - web-gallery-network
    restart: unless-stopped

  # ===================================
  # EXPORT RUNNER SERVICE
  # ===================================
  export-runner:
    build:
      context: ./runner
      dockerfile: Dockerfile
    container_name: web-gallery-export-runner
    extra_hosts:
    - "host.docker.internal:host-gateway"
    environment:
      - NODE_ENV=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_PUBLIC_ENDPOINT=${S3_PUBLIC_ENDPOINT}
      - S3_REGION=${S3_REGION:-eu-west-1}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY:-${MINIO_ROOT_USER}}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD}}
      - S3_BUCKET=${S3_BUCKET:-web-gallery}
      - S3_FORCE_PATH_STYLE=${S3_FORCE_PATH_STYLE:-true}
      - RUNNER_POLL_INTERVAL_MS=5000
      - RUNNER_CLEANUP_INTERVAL_MS=3600000
      - RUNNER_MAX_CONCURRENT_JOBS=2
      - RUNNER_DOWNLOAD_TIMEOUT_MS=60000
    depends_on:
      - minio
    networks:
      - web-gallery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Runner is healthy')"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  # ===================================
  # FRONTEND SERVICE (React Router v7 - Static)
  # ===================================
  frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
      args:
        - VITE_SUPABASE_URL=${SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - VITE_API_URL=http://${PUBLIC_HOST:-localhost}:${BACKEND_PUBLIC_PORT:-3000}
        - VITE_S3_ENDPOINT=${S3_PUBLIC_ENDPOINT}
    container_name: web-gallery-frontend
    ports:
      - "${FRONTEND_PUBLIC_PORT:-80}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - web-gallery-network
    restart: unless-stopped

# ===================================
# VOLUMES
# ===================================
volumes:
  minio_data:
    driver: local
    labels:
      - "project=web-gallery"
      - "service=minio"

# ===================================
# NETWORKS
# ===================================
networks:
  web-gallery-network:
    driver: bridge
    labels:
      - "project=web-gallery"